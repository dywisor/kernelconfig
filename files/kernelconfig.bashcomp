# kernelconfig -- bash completion
# -*- coding: utf-8 -*-

# @stdout @nostderr _kernelconfig_confdir_find ( [subdir], *args )
_kernelconfig_confdir_find() {
    local -a search_dirs=()
    local subdir_relpath
    local iter

    case "${1-}" in
        "/"|"") subdir_relpath="" ;;
        *)      subdir_relpath="/${1#/}" ;;
    esac
    [[ ${#} -eq 0 ]] || shift

    # COULDFIX: use @sysconfdir@ and sed-edit .in file
    for iter in \
        "${HOME}/.config/kernelconfig" \
        "/etc/kernelconfig"
    do
        search_dirs+=( "${iter}${subdir_relpath}" )
    done

    2>/dev/null find "${search_dirs[@]}" "${@}"
}

_kernelconfig_comp() {
    local cur
    local prev
    local script_mode
    local kernel_srctree
    local v
    local w
    local -i idx
    local -a words
    local -a DEFAULT_KERNEL_ARCH_NAMES
    local -a SCRIPT_MODES
    local -a LONGOPTS_SCRIPT_MODE
    local -a OPTS_BASIC
    local -a OPTS_COMMON
    local -a OPTS_GENCONFIG
    local -a OPTS_GENMODALIAS

    COMPREPLY=()
    _get_comp_words_by_ref cur prev

    # target kernel architecture names,
    # used as fallback if no --kernel is specified
    # and /usr/src/linux does not provide useful information
    #
    # Create with:
    #    find  .  -mindepth 1 -maxdepth 1 -type d | \
    #    xargs -n 1 basename | sort | xargs echo | fold -s -w 60
    #
    DEFAULT_KERNEL_ARCH_NAMES=(
        alpha arc arm arm64 avr32 blackfin c6x cris frv h8300
        hexagon ia64 m32r m68k metag microblaze mips mn10300 nios2
        openrisc parisc powerpc s390 score sh sparc tile um
        unicore32 x86 xtensa
    )

    # script modes that can be specified with --script-mode
    SCRIPT_MODES=(
        generate-config
        generate-modalias
        eval-config-check
        list-source-names
        list-sources
        help-sources
    )

    # script mode options that can be specified with --<script mode>
    LONGOPTS_SCRIPT_MODE=()
    for w in help-source "${SCRIPT_MODES[@]}"; do
        LONGOPTS_SCRIPT_MODE+=( "--${w}" )
    done

    OPTS_BASIC=(
        -h --help --usage -V --print-version -q --quiet -v --verbose
    )

    OPTS_COMMON=( -a --arch -k --kernel )

    OPTS_GENCONFIG=(
        -s --settings --config -O --outconfig -H --hwdetect
        -m --modules-dir --{,un}safe-modalias -I
    )

    OPTS_GENMODALIAS=( -j --jobs --modalias-build-dir )

    # get the script mode
    #  do not break on first mode arg found,
    #  it might be overridden by later args
    #
    # While options/args are completed (mostly) script-mode agnostic,
    # the "new-arg" completion at the end of this function
    # suggests only options that are relevant for the selected script mode.
    #
    # get the kernel srctree
    #  used for --arch autocompletion
    #
    kernel_srctree=""
    script_mode=""
    idx=1  # skip argv[0]
    while [[ ${idx} -lt ${COMP_CWORD} ]]; do
        w="${COMP_WORDS[${idx}]}"
        case "${w}" in
            --script-mode=*)
                script_mode="${w#*=}"
            ;;
            --script-mode)
                # then next arg contains the script mode
                if [[ $(( idx + 1 )) -lt ${COMP_CWORD} ]]; then
                    ((idx++))
                    script_mode="${COMP_WORDS[${idx}]}"
                # else: break-loop not necessary
                fi
            ;;
            --kernel=*)
                kernel_srctree="${w#*=}"
            ;;
            -k|--kernel)
                if [[ $(( idx + 1 )) -lt ${COMP_CWORD} ]]; then
                    ((idx++))
                    kernel_srctree="${COMP_WORDS[${idx}]}"
                fi
            ;;
            --*)
                # then possibly a script mode option
                for v in "${LONGOPTS_SCRIPT_MODE[@]}"; do
                    if [[ "${w}" == "${v}" ]]; then
                        script_mode="${w#\-\-}"
                        break  # BREAK-LOOP for v: find matching longopt
                    fi
                done
            ;;
            # otherwise not of interest here
        esac

        ((idx++)) || :
    done

    case "${prev}" in
        -k|--kernel|--modalias-build-dir)
            # <dir>
            _filedir -d
        ;;
        --config|-I|-O|--outconfig|-H|--hwdetect)
            # various options followed by a <file> arg
            _filedir
        ;;
        -j|--jobs)
            # <int>
            true
        ;;
        -a|--arch)
            # target architecture

            # if %kernel_srctree is empty,
            # then either has not been set,
            # or an empty arg was supplied for --kernel
            #
            # In that case, /usr/src/linux is searched for arch names,
            # and a hardcoded arch name list is used as fallback.

            # store in %v whether %kernel_srctree was empty,
            # and default %kernel_srctree to /usr/src/linux
            v="${kernel_srctree}"
            : "${kernel_srctree:=/usr/src/linux}"

            # %w: whitespace-separated arch name list
            w=""
            if [[ -d "${kernel_srctree}/arch" ]]; then
                # -exec test -e '{}/Makefile' ';' -print
                w="$( \
                    2>/dev/null find "${kernel_srctree}/arch" \
                        -mindepth 1 -maxdepth 1 -type d | \
                        xargs -n 1 basename | \
                        grep -v -- '[[:space:]]' \
                )"
            fi

            # no archs found and no explicit %kernel_srctree?
            if [[ -z "${w}" ]] && [[ -z "${v}" ]]; then
                w="${DEFAULT_KERNEL_ARCH_NAMES[*]}"
            fi

            # in either case, add uname -m
            COMPREPLY+=( $( compgen -W "$(uname -m) ${w}" -- "${cur}" ) )
        ;;
        -s|--settings)
            # <file> or name
            _filedir
            case "${cur}" in
                */*) true ;;
                *)
                    # could be a name
                    w="$( \
                        _kernelconfig_confdir_find / -maxdepth 1 -type f | \
                        xargs -r -n 1 basename | \
                        grep -v -- '[[:space:]]' \
                    )"
                    COMPREPLY+=( $( compgen -W "${w}" -- "${cur}" ) )
                ;;
            esac
        ;;
        -m|--modules-dir)
            # <dir> or one of none,auto,optional
            _filedir -d
            COMPREPLY+=( $( compgen -W "none auto optional" -- "${cur}" ) )
        ;;
        --script-mode)
            # followed by a script mode name
            COMPREPLY=( $( compgen -W "${SCRIPT_MODES[*]}" -- "${cur}" ) )
        ;;
        --help-source)
            # followed by the name of a configuration source
            w="$( \
                _kernelconfig_confdir_find /sources \
                    -maxdepth 1 -type f -not -name skel | \
                    xargs -r -n 1 -I '{}' basename '{}' .def | \
                    grep -v -- '[[:space:]]' \
            )"
            COMPREPLY+=( $( compgen -W "${w}" -- "${cur}" ) )
        ;;
        *)
            words=()

            # script mode
            if [[ -z "${script_mode}" ]]; then
                words+=( "${LONGOPTS_SCRIPT_MODE[@]}" "--script-mode" )
            fi

            # script mode specific args
            #  the default mode is "generate-config"
            case "${script_mode}" in
                ""|"generate-config")
                    words+=( "${OPTS_GENCONFIG[@]}" )
                ;;
                "generate-modalias")
                    words+=( "${OPTS_GENMODALIAS[@]}" )
                ;;
            esac

            # common args
            words+=( "${OPTS_COMMON[@]}" )

            # basic args
            words+=( "${OPTS_BASIC[@]}" )

            COMPREPLY=( $( compgen -W "${words[*]}" -- "${cur}" ) )
        ;;
    esac
}
complete -F _kernelconfig_comp kernelconfig
